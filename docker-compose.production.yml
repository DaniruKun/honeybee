version: "3.9"

services:
  mongo:
    image: mongo:5
    hostname: mongo
    # command: --wiredTigerCacheSizeGB 25
    command: --keyFile /keyfile --replSet hb0 --bind_ip_all
    # command: --keyFile /keyfile --replSet hb0 --bind_ip localhost,mongo
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_INITDB_ROOT_USERNAME}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_INITDB_ROOT_PASSWORD}
    volumes:
      - ${DATA_DIR:-./data}/mongo:/data/db
      - ${MONGO_RS_KEYFILE}:/keyfile:ro
    ports:
      - "27017:27017"
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.hostname == ${MAIN_NODE_HOSTNAME}
      restart_policy:
        condition: on-failure

  redis:
    image: redis:6-alpine
    command: redis-server --requirepass ${REDIS_PASSWORD} --appendonly yes
    volumes:
      - ${DATA_DIR:-./data}/redis:/data
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.hostname == ${MAIN_NODE_HOSTNAME}
      restart_policy:
        condition: on-failure

  scheduler:
    image: ${HONEYBEE_IMAGE}
    command: honeybee scheduler
    environment:
      REDIS_URI: redis://:${REDIS_PASSWORD}@redis
      JOB_CONCURRENCY: ${JOB_CONCURRENCY}
      HOLODEX_MAX_UPCOMING_HOURS: ${HOLODEX_MAX_UPCOMING_HOURS}
      HOLODEX_API_KEY: ${HOLODEX_API_KEY}
      CACHE_PATH: /cache
    volumes:
      - ${DATA_DIR:-./data}/cache:/cache
    depends_on:
      - redis
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.hostname == ${MAIN_NODE_HOSTNAME}
      restart_policy:
        condition: on-failure

  worker:
    image: ${HONEYBEE_IMAGE}
    environment:
      REDIS_URI: redis://:${REDIS_PASSWORD}@redis
      MONGO_URI: mongodb://${MONGO_WORKER_USERNAME}:${MONGO_WORKER_PASSWORD}@mongo/${MONGO_DATABASE}
      JOB_CONCURRENCY: ${JOB_CONCURRENCY}
      DEBUG: masterchat
    depends_on:
      - redis
      - mongo
    deploy:
      mode: global
      restart_policy:
        condition: on-failure

  # Kafka-compatible data streaming pipeline
  redpanda:
    image: docker.vectorized.io/vectorized/redpanda:latest
    command: redpanda start --smp '1' --reserve-memory 8000M --overprovisioned --node-id '0' --kafka-addr PLAINTEXT://0.0.0.0:9092,OUTSIDE://0.0.0.0:9093 --advertise-kafka-addr PLAINTEXT://redpanda:9092,OUTSIDE://localhost:9093
    ports:
      - "9093:9093"
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.hostname == ${MAIN_NODE_HOSTNAME}
      restart_policy:
        condition: on-failure

  # MongoDB Kafka Connector
  connect:
    image: ${KAFKA_CONNECT_IMAGE}
    hostname: connect
    depends_on:
      - mongo
      - redpanda
    ports:
      - "8083:8083"
    environment:
      MONGO_URI: mongodb://${MONGO_WORKER_USERNAME}:${MONGO_WORKER_PASSWORD}@mongo/?replicaSet=hb0&authSource=vespa
      MONGO_DATABASE: ${MONGO_DATABASE}
      CONNECT_BOOTSTRAP_SERVERS: "redpanda:9092"
      CONNECT_REST_ADVERTISED_HOST_NAME: connect
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: connect
      CONNECT_CONFIG_STORAGE_TOPIC: connect-configs
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
      CONNECT_OFFSET_STORAGE_TOPIC: connect-offsets
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_TOPIC: connect-status
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_PLUGIN_PATH: "/usr/share/java,/usr/share/confluent-hub-components"
      CONNECT_CONNECTIONS_MAX_IDLE_MS: 180000
      CONNECT_METADATA_MAX_AGE_MS: 180000
      CONNECT_AUTO_CREATE_TOPICS_ENABLE: "true"
      CONNECT_KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      CONNECT_VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.hostname == ${MAIN_NODE_HOSTNAME}
      restart_policy:
        condition: on-failure

  # manager:
  #   image: ${HONEYBEE_IMAGE}
  #   command: honeybee manager
  #   environment:
  #     REDIS_URI: redis://:${REDIS_PASSWORD}@redis
  #     JOB_CONCURRENCY: ${JOB_CONCURRENCY}
  #     PERMANENT_WORKER_IP: ${PERMANENT_WORKER_IP}
  #     TF_PROJECT_ROOT: /app/tf
  #     TF_VAR_token: ${TF_VAR_token}
  #     TF_VAR_ssh_keys: ${TF_VAR_ssh_keys}
  #     TF_VAR_provision_key_path: /tfKey
  #   volumes:
  #     - ${TF_PROVISION_KEY_PATH}:/tfKey:ro
  #     - /var/run/docker.sock:/var/run/docker.sock:ro
  #     - ./tf:/app/tf
  #   depends_on:
  #     - redis
  #   deploy:
  #     replicas: 1
  #     placement:
  #       constraints:
  #         - node.hostname == ${MAIN_NODE_HOSTNAME}
  #     restart_policy:
  #       condition: on-failure

networks:
  default:
    name: ${HONEYBEE_NETWORK}
    external: true
